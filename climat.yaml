openapi: 3.0.0
info:
  title: Дракарики
  version: 1.0.0
servers:
  - url: /
tags:
  - name: Пользователи
  - name: Пользователи > Уровень пользователя
  - name: Пользователи > Стамина
  - name: Фрукты
  - name: Друзья
  - name: Деньги
  - name: Настройки
  - name: Доска лидеров
  - name: Задания
  - name: Дракарики
  - name: Товары
  - name: Карточки
  - name: Qr коды
paths:
  /api/users/addxp:
    post:
      tags:
        - Пользователи > Уровень пользователя
      summary: Добавить XP пользователю
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                xp: 500
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/stamina/dropstamina:
    post:
      tags:
        - Пользователи > Стамина
      summary: Сбросить n стамины
      description: |-
        Сбросить n стамины у игрока  
        Указывается в переменной count  
        userId - идентификатор пользователя.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                count: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/stamina/addstamina:
    post:
      tags:
        - Пользователи > Стамина
      summary: Добавить n стамины
      description: |-
        Добавить n стамины у игроку  
        Указывается в переменной count  
        userId - идентификатор пользователя.

        Возможно добавлять привентивно через спец бонусы и тд
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                count: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/stamina/check:
    post:
      tags:
        - Пользователи > Стамина
      summary: Проверка стамины
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/:
    post:
      tags:
        - Пользователи
      summary: Создать пользователя
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users:
    get:
      tags:
        - Пользователи
      summary: Получить всех пользователей
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Пользователи
      summary: Обновить пользователя
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 1
                login: admin
                password: '123456'
                name: Admin
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Пользователи
      summary: Удалить пользователя
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/1:
    get:
      tags:
        - Пользователи
      summary: Получить пользователя по ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/login:
    post:
      tags:
        - Пользователи
      summary: Авторизоваться пользователем
      description: |-
        При авторизации проверяется время последнего входа  
        сейчас за час восстанавливается 100 стамины
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/users/serachbyname:
    post:
      tags:
        - Пользователи
      summary: Найти пользователя по имени
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: admin
                userId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/fruits:
    post:
      tags:
        - Фрукты
      summary: Создать фрукт
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: BossFruit
                type: 2
                ruName: Босс-фрукт
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Фрукты
      summary: Обновить фрукт
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 1
                name: FlyFruit
                type: 1
                ruName: летающий фрукт
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Фрукты
      summary: Удалить Фрукт
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/fruits/1:
    get:
      tags:
        - Фрукты
      summary: Получить фрукт по ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/fruits/:
    get:
      tags:
        - Фрукты
      summary: Получить все фрукты
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/fruits/adduserfruit:
    post:
      tags:
        - Фрукты
      summary: Добавить фрукт пользователю
      description: >-
        Увеличивает стамину пользователя на n где n это кол-во фруктов
        переданных в count/5


        Вернет полную инфу о юзере (на случай если там например будут потом спец
        фрукты которые дают еще и ексы или еще чего)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                count: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/friends/addtofriend:
    post:
      tags:
        - Друзья
      summary: Добавить друга
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                friendId: 2
                userId: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/friends/setbestfriend:
    post:
      tags:
        - Друзья
      summary: Сделать лучшим другом
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                friendId: 4
                userId: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/friends/removefriend:
    post:
      tags:
        - Друзья
      summary: Удалить из друзей
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                friendId: 4
                userId: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/friends/getbyuser:
    get:
      tags:
        - Друзья
      summary: Получить друзей пользователя
      description: Выдает друзей пользователя сортированных по их уровню
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/money/addmoney:
    post:
      tags:
        - Деньги
      summary: Добавить n денег пользователю
      description: |-
        Добавляет денег пользователю  
        по типам  
        gold  
        cristal
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                type: gold
                count: 200
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/money/dropmoney:
    post:
      tags:
        - Деньги
      summary: Убрать n денег у пользователя
      description: |-
        Убирает n денег e пользователя по типам

        gold  
        cristal
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                type: gold
                count: 200
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/drakariki/generate:
    post:
      tags:
        - Настройки
      summary: Создать 3 дракарика
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/gamelvls/generate:
    post:
      tags:
        - Настройки
      summary: Сгенерировать лимиты уровней
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/generate:
    get:
      tags:
        - Настройки
      summary: Сгенерировать 10 заданий
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/generateforuser:
    get:
      tags:
        - Настройки
      summary: Сгенерировать задания для пользователя на неделю
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/settings/synchbd:
    post:
      tags:
        - Настройки
      summary: Синхронизировать базу
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/settings/rebuildbase:
    post:
      tags:
        - Настройки
      summary: Пересоздать базу
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/upload:
    post:
      tags:
        - Настройки
      summary: Загрузить картинку
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/liderboard:
    get:
      tags:
        - Доска лидеров
      summary: Получить доску лидеров
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks:
    get:
      tags:
        - Задания
      summary: Получить все задания
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/3:
    get:
      tags:
        - Задания
      summary: Получить задание по id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/usertasks:
    get:
      tags:
        - Задания
      summary: Получить задания пользователя
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/complite:
    post:
      tags:
        - Задания
      summary: Выполнить квест юзера
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dailytaskId: 2
                userId: 3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/dailyTasks/recive:
    post:
      tags:
        - Задания
      summary: Получить награды за квест юзера
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dailytaskId: 2
                userId: 3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/drakariki/:
    get:
      tags:
        - Дракарики
      summary: Получить список дракариков
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/drakariki/addtouser:
    post:
      tags:
        - Дракарики
      summary: Привязать дракарика пользователю
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                drakarikId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/generate:
    post:
      tags:
        - Товары
      summary: Сгенерировать товары
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/:
    get:
      tags:
        - Товары
      summary: Получить список товаров
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          example: '1'
        - name: type
          in: query
          schema:
            type: integer
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/addtouser:
    post:
      tags:
        - Товары
      summary: Добавить товар пользователю
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                itemId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/by:
    post:
      tags:
        - Товары
      summary: Купить предмет
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                itemId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/useritems:
    get:
      tags:
        - Товары
      summary: Получить товары пользователя
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/equip:
    post:
      tags:
        - Товары
      summary: Надеть предмет
      description: предмет наденется только при условии что товар куплен этим пользователем
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                itemId: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items/equiped:
    get:
      tags:
        - Товары
      summary: Получить товары надетые на дракарика
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/items:
    post:
      tags:
        - Товары
      summary: Создать товар
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: test2
                description: testItem
                price: 50
                type: 2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Товары
      summary: Обновить товар
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 12
                name: test3
                description: testItem
                price: 50
                type: 2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Товары
      summary: Удалить товар
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/generate:
    post:
      tags:
        - Карточки
      summary: Генерировать тестовые карточки
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/:
    get:
      tags:
        - Карточки
      summary: Получить все карточки
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/addtouser:
    post:
      tags:
        - Карточки
      summary: Добавить карточку пользователю
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                cardId: 2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/random:
    get:
      tags:
        - Карточки
      summary: Получить случайную карту
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/transfer:
    post:
      tags:
        - Карточки
      summary: Передать карту
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                cardId: 2
                transferuser: 2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards:
    post:
      tags:
        - Карточки
      summary: Создать карточку
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Test card create
                description: New Test card
                img: /img/1.png
                rarity: 3
                price: '40'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Карточки
      summary: Удалить карточку
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/upd:
    post:
      tags:
        - Карточки
      summary: Обновить карточку
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: '11'
                name: Test card create
                description: New Test card
                img: /img/1.png
                rarity: 3
                price: '40'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cards/by:
    post:
      tags:
        - Карточки
      summary: Купить карточку
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                userId: 1
                cardId: 11
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/qrs/create:
    post:
      tags:
        - Qr коды
      summary: Создать расположение площадки
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                latitude: 53.513662
                longitude: 49.297441
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/qrs/check:
    post:
      tags:
        - Qr коды
      summary: Проверить находится ли игрок на одной из площадок
      description: >-
        ### POST /api/qrs/check


        StartFragmentПроверяет по координатам находится ли игрок в радиусе 500м
        от площадки что бы играть  
        
        
        #### Request Body


        - latitude (number, required): The latitude coordinate for the QR code
        location.
        
        - longitude (number, required): The longitude coordinate for the QR code
        location.
        
        
        #### Response


        The response is in JSON format and has the following schema:


        ``` json

        {
          "type": "boolean",
          "description": "Indicates the status of the QR code check."
        }

         ```

        #### Example Response


        ``` json

        true

         ```

        This returned a 200 status code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                latitude: 53.513662
                longitude: 49.297441
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}